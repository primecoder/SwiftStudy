/*:
 # Overview
 
 Show object serialisation from JSON string.
 This playground shows examples of models auto generated using Quicktype.io
 website.
 
 History:
 - 2021.03.14 Created by Ace
 - 2021.04.18 Updated, added Manual Modeling
 
 */

import Foundation

let jsonData = """
[
    {
    "firstName": "Tony",
    "lastName": "Stark",
    "birthDate": "1969-07-21",
    "gender": "male"
    },
    {
    "firstName": "Emmett",
    "lastName": "Brown",
    "birthDate": "1959-02-21",
    "gender": "male"
    },
    {
    "firstName": "Lara",
    "lastName": "Croft",
    "birthDate": "1980-08-01",
    "gender": "female"
    }
]
"""

// Using quicktype.io, struct is autogenerated as below.
// Codable is typealias of Decodable & Encodable
// Decodable requires init(from: Decoder)
// Encodable requires encode(to: Encoder)
//
// Because Person has its properites as String which is conformed to both Decodable & Encodable
// There is no more work required.

struct Person: Codable {
    let firstName, lastName, birthDate, gender: String
}

typealias People = [Person]

// MARK: - Decoding JSON string to objects

if let peopleFromJsonData =
    try? JSONDecoder()
    .decode(
        People.self,
        from: jsonData.data(using: .utf8)!      // <-- Convert string to data
    ) {
    print("Load people from json data. Count=\(peopleFromJsonData.count)")
    for person in peopleFromJsonData {
        print("person: \(person)")
    }
}


// MARK: - Encoding objects to JSON data

var people = People()
people.append(Person(firstName: "Joe", lastName: "Bloe", birthDate: "2000-12-31", gender: "male"))
people.append(Person(firstName: "Mary", lastName: "Lewis", birthDate: "2012-05-12", gender: "female"))

if let jsonDataOut = try? JSONEncoder().encode(people),
   let jsonDataStr = String(data: jsonDataOut, encoding: .utf8) {
    print("Convert objects to JSON data: \(jsonDataStr)")
}
